#+TITLE: Setup Stuff
#+OPTIONS: toc nil

This file documents some of the crazy things that I have to do n order
to have all of my dependencies available.

* Overall
** Emacs stuff 
I'll need to keep this updated, when Emacs gets version bumped.

#+BEGIN_SRC sh
wget https://www.dropbox.com/download?dl=packages/ubuntu/dropbox_2015.10.28_amd64.deb
#+END_SRC

#+BEGIN_SRC sh :results none :eval no
  cd ~
  sudo apt-get install build-dep emacs24
  git clone git://git.savannah.gnu.org/emacs.git

#+END_SRC

#+BEGIN_SRC sh :eval no
   cd ~/emacs
    ./autogen.sh
    ./configure
    make
#+END_SRC


#+BEGIN_SRC sh :results none
  sudo make install
#+END_SRC
Seperate out the sudo parts, to prevent breakages.
***  Package/Settings Configuration

#+BEGIN_SRC elisp :results none :tangle base-pkg.el
	(unless (package-installed-p 'use-package)
	  (package-refresh-contents)
	  (package-install 'use-package))

	  (unless (package-installed-p 'diminish)
	  (package-refresh-contents)
	  (package-install 'diminish))
	(use-package magit :ensure t)
    (setq package-archives '(("elpa" . "https://tromey.com/elpa/")
			     ("gnu" . "https://elpa.gnu.org/packages/")
			     ("marmalade" . "https://marmalade-repo.org/packages/")))
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (add-to-list 'package-archives
  '("melpa-stable" . "https://stable.melpa.org/packages/"))
  ;; (add-to-list 'package-archives
  ;; '("melpa" . "https://melpa.org/packages/"))
  (global-set-key "\C-cg" 'magit-status)
  (global-set-key (kbd "C-x m") 'execute-extended-command)
    (use-package helpful
      :ensure t)
#+END_SRC

#+BEGIN_SRC elisp :results none :tangle keybindings.el
    ;;utility keybindings
    (global-set-key "\C-co" 'browse-url-at-point)
    (global-set-key "\C-cm" 'man)
    (global-set-key "\C-xt" 'transpose-lines); keybinding to transpose lines
    ;;org mode keybindings
    (global-set-key (kbd "\C-cw") 'balance-windows)
    ;; process commands all C-c<letter>
    (global-set-key "\C-cr" 'R); keybinding for replace string
    (global-set-key "\C-cs" 'shell); keybinding to start shell process
    (global-set-key "\C-cp" 'run-python)
    (global-set-key "\C-xc" 'inferior-lisp)
    (global-set-key "\C-cg" 'magit-status)

    (global-set-key "\C-cl" 'org-store-link)
    (global-set-key "\C-cc" 'org-capture) ;;i should either start using
					  ;;these or delete them
    (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)
  (global-set-key "\C-ci" 'org-redisplay-inline-images)
#+END_SRC

- Keybindings are also pretty simple, so I should load
them before anything else breaks

#+BEGIN_SRC elisp :results none :tangle .emacs
(load ( "~/Dropbox/literate_emacs_update/base-pkg.el"))
(load ( "~/Dropbox/literate_emacs_update/keybindings.el"))
  ;need to think of a better way of handling conda paths
    ;; (setq exec-path (cons "/home/richie/anaconda3/bin" exec-path)) 
#+END_SRC

#+BEGIN_SRC elisp :results none 
    (setq package-archives '(("elpa" . "https://tromey.com/elpa/")
			     ("gnu" . "https://elpa.gnu.org/packages/")
			     ("marmalade" . "https://marmalade-repo.org/packages/")))
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (add-to-list 'package-archives
  '("melpa-stable" . "https://stable.melpa.org/packages/"))
  ;; (add-to-list 'package-archives
  ;; '("melpa" . "https://melpa.org/packages/"))
#+END_SRC
First, setup the archives. Next, install a list of packages that I tend to use



#+BEGIN_SRC elisp :tangle package-new.el
  (setq package-list '(use-package
			 diminish
			 ))
    ;;taken from http://stackoverflow.com/questions/10092322/how-to-automatically-install-emacs-packages-by-specifying-a-list-of-package-name
    (package-initialize)

    (unless package-archive-contents
      (package-refresh-contents))

    (dolist (package package-list)
      (unless (package-installed-p package)
	(package-install package)))


#+END_SRC

#+RESULTS:

I tend not to use this anymore, as use-package provides a far superior
method of managing this


#+RESULTS:

#+BEGIN_SRC elisp :tangle package-new.el
    (require 'package)
    (setq package-enable-at-startup nil)
    (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/") t)
    (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
    (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
    (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/") t)
    ;; (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
	(package-initialize)

	(unless (package-installed-p 'use-package)
	  (package-refresh-contents)
	  (package-install 'use-package))

	  (unless (package-installed-p 'diminish)
	  (package-refresh-contents)
	  (package-install 'diminish))

	(eval-when-compile
	  (require 'use-package))
	(require 'diminish)
	(require 'bind-key)
	(setq package-archives '(("elpa" . "http://tromey.com/elpa/")
				     ("gnu" . "http://elpa.gnu.org/packages/")
				     ("marmalade" . "http://marmalade-repo.org/packages/")
				     ("org" . "http://orgmode.org/elpa/")
				     ("melpa" . "http://melpa.org/packages/")
				     ))

	(use-package flycheck
		     :ensure t
		     :config
	  (global-flycheck-mode 1))

      (use-package tex 
	:ensure auctex
	;; :config
	;; ((setq TeX-auto-save t)

	;; (setq TeX-parse-self t))  
      )
	(use-package elpy
		     :ensure t

		     )
	(use-package smartparens
		     :ensure t
		     :config
		     (smartparens-global-mode t)
		     (require 'smartparens-config))
    (use-package ess
      :ensure t)

    (use-package helm
      :ensure t
      :config
      (require 'helm-config))
  (require 'package)



  ;; Add melpa to your packages repositories
  ;; (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)

  (package-initialize)

  ;; Install use-package if not already installed
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)

  ;; Enable defer and ensure by default for use-package
  ;; Keep auto-save/backup files separate from source code:  https://github.com/scalameta/metals/issues/1027
  (setq use-package-always-defer t
	use-package-always-ensure t
	backup-directory-alist `((".*" . ,temporary-file-directory))
	auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))

  ;; Enable scala-mode and sbt-mode
  (use-package scala-mode
    :mode "\\.s\\(cala\\|bt\\)$")

  (use-package sbt-mode
    :commands sbt-start sbt-command
    :config
    ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
    ;; allows using SPACE when in the minibuffer
    (substitute-key-definition
     'minibuffer-complete-word
     'self-insert-command
     minibuffer-local-completion-map)
     ;; sbt-supershell kills sbt-mode:  https://github.com/hvesalai/emacs-sbt-mode/issues/152
     (setq sbt:program-options '("-Dsbt.supershell=false"))
  )

  ;; Enable nice rendering of diagnostics like compile errors.
  (use-package flycheck
    :init (global-flycheck-mode))

  (use-package lsp-mode
    ;; Optional - enable lsp-mode automatically in scala files
    :hook (scala-mode . lsp)
    :config (setq lsp-prefer-flymake nil))

  (use-package lsp-ui)

  ;; lsp-mode supports snippets, but in order for them to work you need to use yasnippet
  ;; If you don't want to use snippets set lsp-enable-snippet to nil in your lsp-mode settings
  ;;   to avoid odd behavior with snippets and indentation
  (use-package yasnippet)

  ;; Add company-lsp backend for metals
  (use-package company-lsp)
  (setq lsp-keymap-prefix "c-l")

  (use-package lsp-mode
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
	   (python-mode . lsp)
	   (R-mode . lsp)
	   ;; if you want which-key integration
	   (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  ;; optionally
  (use-package lsp-ui :commands lsp-ui-mode)
  (use-package company-lsp :commands company-lsp)
  ;; if you are helm user
  (use-package helm-lsp :commands helm-lsp-workspace-symbol)
  ;; if you are ivy user
  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

  ;; optionally if you want to use debugger
  (use-package dap-mode)
  ;; (use-package dap-LANGUAGE) to load the dap adapter for your language

  ;; optional if you want which-key integration
  (use-package which-key
    :config
    (which-key-mode))

  (setq gc-cons-threshold 400000000)
  (setq read-process-output-max (* 1024 1024)) 
  (setq lsp-response-timeout 60)
  (use-package lsp-python-ms
    :ensure t
    :hook (python-mode . (lambda ()
			    (require 'lsp-python-ms)
			    (lsp))))

  (setq company-minimum-prefix-length 1
	company-idle-delay 0.0)
#+END_SRC

#+RESULTS:
: t





#+RESULTS:
: create-key-group

#+BEGIN_SRC emacs-lisp :eval false
   # (mapc 'global-unset-key '([left] [right] [up] [down]));;learned this now, no need to keep the

#+END_SRC

This is my most controversial keyboard change. I learned to live with it, but fell back to my old ways when I allowed the arrow keys to return. I'm unsetting it now, I like my arrow-keys.

#+BEGIN_SRC elisp :tangle cpp.el
(add-hook 'c++-mode-hook 'irony-mode)
(add-hook 'c-mode-hook 'irony-mode)
(add-hook 'objc-mode-hook 'irony-mode)

;; replace the `completion-at-point' and `complete-symbol' bindings in
;; irony-mode's buffers by irony-mode's function
(defun my-irony-mode-hook ()
  (define-key irony-mode-map [remap completion-at-point]
    'irony-completion-at-point-async)
  (define-key irony-mode-map [remap complete-symbol]
    'irony-completion-at-point-async))
(add-hook 'irony-mode-hook 'my-irony-mode-hook)
(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle setup-editing.el
(setq inhibit-startup-screen t)
(setq
   backup-by-copying t      ; don't clobber symlinks
   backup-directory-alist
   '(("." . "~/.saves/")))

;; Note that the built-in `describe-function' includes both functions
;; and macros. `helpful-function' is functions only, so we provide
;; `helpful-callable' as a drop-in replacement.
(global-set-key (kbd "C-h f") #'helpful-callable)

(global-set-key (kbd "C-h v") #'helpful-variable)
(global-set-key (kbd "C-h k") #'helpful-key)

;; Lookup the current symbol at point. C-c C-d is a common keybinding
;; for this in lisp modes.
(global-set-key (kbd "C-c C-d") #'helpful-at-point)

;; Look up *F*unctions (excludes macros).
;;
;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
;; already links to the manual, if a function is referenced there.
(global-set-key (kbd "C-h F") #'helpful-function)

;; Look up *C*ommands.
;;
;; By default, C-h C is bound to describe `describe-coding-system'. I
;; don't find this very useful, but it's frequently useful to only
;; look at interactive functions.
(global-set-key (kbd "C-h C") #'helpful-command)
(setq electric-indent-mode t)
(load-theme 'wheatgrass t)
(setq sentence-end-double-space nil)
(setq tab-always-indent 'complete)
(add-hook 'prog-mode-hook (lambda () (interactive) (setq show-trailing-whitespace 1)))
(add-hook 'after-init-hook 'global-company-mode)
(require 'flycheck)
(add-hook 'after-init-hook #'global-flycheck-mode)
(add-to-list 'display-buffer-alist '("*shell*" display-buffer-same-window))
(smartparens-global-mode t)
(require 'smartparens-config)
(setq save-interprogram-paste-before-kill t)
(require 'cedet)
(require 'semantic)
(add-to-list 'load-path "~/mmix-mode")
    (autoload 'mmix-mode "mmix-mode" "Major mode for editing MMIX files" t)
    (setq auto-mode-alist (cons '("\\.mms" . mmix-mode)
                                      auto-mode-alist))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle my-ess.el
    (setq ess-eldoc-show-on-symbol t)
  (setq ess-tab-complete-in-script t)
  ;; (add-to-list 'load-path "/usr/share/emacs/25.2/site-lisp/elpa/ess-18.10.2")

  (require 'ess-site)
#+END_SRC

#+RESULTS:
: ess-site

This shows function arguments whenever point is on a symbol (i.e. function).

#+RESULTS:
#+BEGIN_SRC emacs-lisp :tangle latex-ess.el
  (add-hook 'Rnw-mode-hook
            (lambda ()
              (add-to-list 'TeX-command-list
                           '("Sweave" "R CMD Sweave %s"
                             TeX-run-command nil (latex-mode) :help "Run Sweave") t)
              (add-to-list 'TeX-command-list
                           '("LatexSweave" "%l %(mode) %s"
                             TeX-run-TeX nil (latex-mode) :help "Run Latex after Sweave") t)
              (setq TeX-command-default "Sweave")))
  (setq TeX-file-extensions
        '("Snw" "Rnw" "nw" "tex" "sty" "cls" "ltx" "texi" "texinfo"))
  (add-to-list 'auto-mode-alist '("\\.Rnw\\'" . Rnw-mode))
  (add-to-list 'auto-mode-alist '("\\.Snw\\'" . Rnw-mode))
  (setq ess-swv-plug-into-AUCTeX-p t)
  (autoload 'ess-rdired "ess-rdired"
         "View *R* objects in a dired-like buffer." t)
  (setq ess-help-pop-to-buffer t)
  (setq TeX-auto-save t);;tell tex to autosave
  (setq TeX-parse-self t)
  (setq reftex-plug-into-AUCTeX t)
  (setq-default TeX-master nil)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode
  (add-hook 'Rnw-mode-hook 'turn-on-reftex)
  (add-hook 'tex-mode-hook (function (lambda () (setq ispell-parser 'tex))))
  (setq reftex-file-extensions
        '(("Snw" ".Snw")
          ("Rnw" ".Rnw")
          ("nw" ".nw")
  ("tex" ".tex" ".ltx")
  ("bib" ".bib")))
  (setq TeX-file-extensions
        '("Snw" "Rnw" "nw" "tex" "sty" "cls" "ltx" "texi" "texinfo"))
  (autoload 'ebib "ebib" "Ebib, a BibTeX database manager." t)
  (setq reftex-external-file-finders
        '(("tex" . "kpsewhich -format=.tex %f")
          ("bib" . "kpsewhich -format=.bib %f")))
  (add-hook 'prog-mode-hook 'auto-revert-mode)
  (add-hook 'LaTeX-mode-hook 'auto-revert-mode)
  (setq reftex-try-all-extensions t)

#+END_SRC
#+BEGIN_SRC sh :tangle setup.sh
  sudo apt install git
  git config --global user.email "richie.morrisroe@gmail.com"
#+END_SRC

We need to setup git before magit will work properly.

#+BEGIN_SRC sh :tangle setup.sh
  sudo apt install curl
  sudo apt-get install chromium-browser
  ##install ctrl caps lock##
  ##due to bug, currently gnome-tweak-tool needed
  sudo apt-get install gnome-tweak-tool
  sudo apt-get build-dep emacs25
  sudo apt-get install r-base-core r-base-dev r-doc 
  sudo apt-get install gawk
  sudo apt-get install lamp-server
  ##graphics really shit on 14.04 Bumblebee
  ##ended up installing a proprietary driver because of Skype
  sudo apt-get install exfat-fuse exfat-utils
  sudo apt-get install mysql-server mysql-client
  sudo apt-get install git
  sudo apt-get install lm-sensors
  sudo add-apt-repository ppa:linrunner/tlp
  sudo apt-get update
  sudo apt-get install tlp tlp-rdw
  sudo apt-get install whois
  sudo apt-get install nvidia-cuda-toolkit
  sudo apt install clang llvm cmake
  sudo apt install texlive-latex-base texlive-latex-recommended texlive-fonts-recommended
#+END_SRC

#+RESULTS:



#+BEGIN_SRC elisp :tangle org-setup.el
  (org-babel-do-load-languages
  'org-babel-load-languages
   '((R . t)
     (emacs-lisp . t)
     (sql . t)
     (python . t)
     (latex . t)
     (shell . t)
     (java . t)
     (C . t)
     (lisp . t)
     ;; (stan . t)
     ))
  (setq org-babel-confirm-evaluate nil)
  (setq org-default-notes-file "~/Dropbox/Notes/notes.org")
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)
  (global-set-key "\C-ci" 'org-redisplay-inline-images)

  (setq org-edit-src-content-indentation 0)
  (setq org-src-tab-acts-natively t)
(setq org-src-preserve-indentation t)
; not idempotent, should probably check car exec-path first
  (setq exec-path (cons "/home/richie/anaconda3/bin" exec-path))
#+END_SRC

#+RESULTS:
| ~/anaconda3/bin | /home/richie/torch/install/bin | /home/richie/bin | /usr/local/sbin | /usr/local/bin | /usr/sbin | /usr/bin | /sbin | /bin | /usr/games | /usr/local/games | /snap/bin | /usr/local/libexec/emacs/27.0.50/x86_64-pc-linux-gnu | /home/richie/anaconda3/bin/ | ~/.local/bin/ | /sw/bin | /home/richie/anaconda3/bin/ | ~/.local/bin/ |

#+BEGIN_SRC emacs-lisp :tangle google.el
  (use-package google-this
    :config
    (google-this-mode 1))

#+END_SRC

#+RESULTS:
: t



First, allow org to do it's thing.

#+BEGIN_SRC elisp :tangle setup-editing.el
  (global-set-key (kbd "C-x m") 'execute-extended-command)
  (add-hook 'shell-mode-hook 'compilation-shell-minor-mode) ;;enable compile buffers in shell mode
    (setq debug-on-error t)
    (setq inferior-lisp-program "sbcl")
    (setq-default indent-tabs-mode nil)
    (setq synonyms-file        "~/mythesaurus/")
    (setq synonyms-cache-file  "~/mythesaurus/cache")
    (show-paren-mode 1);;always show bracket highlighting
    (global-linum-mode 1);;always show line numbers
    (global-font-lock-mode 1)
    (transient-mark-mode t) ;;turn on transient mark mode, must have turned it off by accident.
    (setq x-select-enable-clipboard t) ;; enable clipboard in and out of emacs
    (fset 'yes-or-no-p 'y-or-n-p) ;;allow y or n to stand for yes or no
    (put 'erase-buffer 'disabled nil) ;;enable erase buffer command
    (put 'set-goal-column 'disabled nil) ;;enable set goal column
    ;; (load-theme 'wheatgrass t)
    (setq tramp-default-method "ssh")

    (put 'upcase-region 'disabled nil)
    (put 'downcase-region 'disabled nil)
    (server-start)
    (add-hook 'prog-mode-hook 'subword-mode)
    (global-set-key "\C-cp" 'run-python)

#+END_SRC

#+BEGIN_SRC elisp :name tramp.el
  (eval-after-load "tramp"
    '(progn
       (defvar sudo-tramp-prefix
         "/sudo::"
         (concat "Prefix to be used by sudo commands when building tramp path "))

       (defun sudo-file-name (filename) (concat sudo-tramp-prefix filename))

       (defun sudo-find-file (filename &optional wildcards)
         "Calls find-file with filename with sudo-tramp-prefix prepended"
         (interactive "fFind file with sudo ")
         (let ((sudo-name (sudo-file-name filename)))
           (apply 'find-file
                  (cons sudo-name (if (boundp 'wildcards) '(wildcards))))))

       (defun sudo-reopen-file ()
         "Reopen file as root by prefixing its name with sudo-tramp-prefix and by clearing buffer-read-only"
         (interactive)
         (let*
             ((file-name (expand-file-name buffer-file-name))
              (sudo-name (sudo-file-name file-name)))
           (progn
             (setq buffer-file-name sudo-name)
             (rename-buffer sudo-name)
             (setq buffer-read-only nil)
             (message (concat "Set file name to " sudo-name)))))

       (global-set-key "\C-x+" 'sudo-find-file)
       (global-set-key "\C-x!" 'sudo-reopen-file)))
(setq putty-directory "C:/Program Files/PuTTY")
(when (eq window-system 'w32)
  (setq tramp-default-method "plink")
  (when (and (not (string-match putty-directory (getenv "PATH")))
	     (file-directory-p putty-directory))
    (setenv "PATH" (concat putty-directory ";" (getenv "PATH")))
    (add-to-list 'exec-path putty-directory)))
#+END_SRC

#+BEGIN_SRC elisp :name org

#+END_SRC

#+RESULTS:
: org-redisplay-inline-images
*** Lisp Hacking!

#+BEGIN_SRC elisp
(defvar file (buffer-file-name))
(setq buf "/home/richie/Dropbox/Thesis/func.R")
(defun rm-formatr (buf)
  "Format given buffer with formatR"
  (interactive "bchoose buffer:")
  (let file (buffer-file-name buf))
       (ess-command (format "formatR::tidy_source(\"%s\")" file) buf))

(rm-formatr "func.R")

#+END_SRC

- if I set the buf variable it works
- ess-command has an outbuf parameter to store the results
- can theoretically diff this
** Power Stuff

#+BEGIN_SRC sh
  sudo add-apt-repository ppa:linrunner/tlp
  sudo apt-get update
  sudo apt-get install tlp tlp-rdw
  sudo apt-get install tp-smapi-dkms acpi-call-tools
#+END_SRC


Add thinkpad/Linux related power saving functions. The joy of tlp is that it just works, rather than requiring me to mess around with kernel settings.
** LaTeX

#+BEGIN_SRC sh
  sudo apt-get install texlive-full
#+END_SRC

Overkill, but I don't like error messages when running LaTeX.

#+BEGIN_SRC sh
  sudo apt-get install pandoc
#+END_SRC

Pandoc is great for converting one format to another, and supports word, which is nice.

** Python stuff

*** TODO Document conda installation
- conda handles binary dependencies, which is better than pip
 #+BEGIN_SRC sh :session :results none
  sudo apt-get install python3-numpy python3-scipy python3-pip
 #+END_SRC

 Get Numpy, Scipy and Pip.

 I have installed so much Python without recording it here.
 #+BEGIN_SRC sh
conda install -c conda-forge autopep8 yapf flake8
conda install -c steamelephant importmagic 
 #+END_SRC

 - Install stuff for elpy
 #+RESULTS:

#+BEGIN_SRC sh
curl https://repo.anaconda.com/archive/Anaconda3-5.1.0-Linux-x86_64.sh
bash Anaconda-latest-Linux-x86_64.sh

#+END_SRC

- conda needs a new link each time

#+BEGIN_SRC sh setup_py.sh
  conda install scipy numpy sklearn pandas seaborn torch torch-vision requests 

#+END_SRC

#+BEGIN_SRC lisp :tangle python.el
;; (setq exec-path (append  '("~/anaconda3/bin") exec-path))
;; (when (executable-find "jupyter")
;;   (setq
;;    python-shell-interpreter "jupyter"
;;    python-shell-interpreter-args "console --simple-prompt"
;;    python-shell-prompt-regexp "In \\[[0-9]+\\]: "
;;    python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "
;;    python-shell-completion-setup-code
;;    "from IPython.core.completerlib import module_completion"
;;    python-shell-completion-module-string-code
;;    "';'.join(module_completion('''%s'''))\n"
;;    python-shell-completion-string-code
;;    "';'.join(get_ipython().Completer.all_completions('''%s'''))\n"))
(setq python-shell-interpreter "jupyter")
(setq python-shell-interpreter-args "console")

(elpy-enable)
#+END_SRC

** Webserver stuff
#+BEGIN_SRC sh
  sudo apt-get install php7 mysql apache2
#+END_SRC


Because I'll need it at some point.

#+BEGIN_SRC sh
  # installs add-apt-repository
  sudo apt-get install software-properties-common

  sudo apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0x5a16e7281be7a449
  sudo add-apt-repository "deb http://dl.hhvm.com/ubuntu $(lsb_release -sc) main"
  sudo apt-get update
  sudo apt-get install hhvm
#+END_SRC



** Deep Learning related stuff
#+BEGIN_SRC sh
  sudo ln -s /usr/lib/nvidia-cuda-toolkit/bin/gcc /usr/bin/gcc-4.9
  sudo ln -s  /usr/lib/nvidia-cuda-toolkit/bin/g++ usr/bin/g++-4.9

#+END_SRC

#+RESULTS:

Need some magic to work around nvcc using old version of gcc.
This magic works on

#+BEGIN_SRC sh
cat /etc/release
#+END_SRC

#+RESULTS:

#+BEGIN_SRC sh :results output
  cat /etc/nvcc.profile
#+END_SRC

#+RESULTS:
#+begin_example
# Syntax:
#   name  = <text>   assignment
#   name ?= <text>   conditional assignment
#   name += <text>   prepend
#   name =+ <text>   append
# Predefined variables: _SPACE_, _HERE_, _TARGET_DIR_, _TARGET_SIZE_

NVVMIR_LIBRARY_DIR = /usr/lib/nvidia-cuda-toolkit/libdevice

PATH		+= /usr/lib/nvidia-cuda-toolkit/bin:

#INCLUDES	+=

LIBRARIES	=+ $(_SPACE_) -L/usr/lib/x86_64-linux-gnu/stubs

#CUDAFE_FLAGS	+=
#PTXAS_FLAGS	+=
#+end_example

Grab the path, and alter the symlinks above to point to the same directory as nvcc

** GCC 4<5
The transition has caused me some difficulty.

#+BEGIN_SRC sh
  sudo apt-get-install g++-4.9.10
  sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.9 10
#+END_SRC
Otherwise, CUDA is unavailable.

- This happened again, this time with gcc6-7

- hopefully the same approach applies

#+BEGIN_SRC sh

#+END_SRC


*** Torch (Lua)
#+BEGIN_SRC sh
  cd ~
  curl -s https://raw.githubusercontent.com/torch/ezinstall/master/install-deps | bash
  git clone https://github.com/torch/distro.git ~/torch --recursive
  cd ~/torch; ./install.sh
#+END_SRC
next get iTorch
#+BEGIN_SRC sh
  cd ~
  git clone https://github.com/facebook/iTorch.git
  cd iTorch
  luarocks make
#+END_SRC

Torch was super easy. Tensor Flow wasn't that much harder (but sure did require a lot of steps).


*** TensorFlow

#+BEGIN_SRC sh
  sudo apt-get install pkg-config zip g++ zlib1g-dev unzip
  ##you need cudnn, typically I have it in Downloads.
  git clone --recursive-submodules https://github.com/tensorflow/tensorflow
#+END_SRC

#+BEGIN_SRC sh
  cd tensorflow;
  ./configure
  bazel build -c opt --config=cuda //tensorflow/cc:tutorials_example_trainer

#+END_SRC

Hmmm, it certainly seemed much harder than that.
I can guarentee that it takes a long time, and it uses all of your available cores.
____Elapsed time: 2342.696s, Critical Path: 2321.72s (according to bazel build).
And I couldn't get it to work :(

*** TODO PyTorch (document install)
- this is pretty easy, but I don't have it done
** Missing Libraries



#+BEGIN_SRC sh :tangle setup.sh
  sudo apt-get install apt-file
  sudo apt-file update
#+END_SRC

#+RESULTS:

#+BEGIN_SRC sh :session :eval maybe
  sudo apt-file search proj_api.h
#+END_SRC

Returns libproj-dev, so next step is to install that.

#+BEGIN_SRC sh :eval maybe
  sudo apt-get install libproj-dev
#+END_SRC

Get apt-file, so that we can search for missing libraries throughout this process.


** R related stuff

#+BEGIN_SRC R :session :eval maybe :tangle setup_r.R
  update.packages(ask=FALSE)
install.packages(c("ggplot2", "dplyr", "lubridate", "tidyr", "psych", "caret", "devtools", "broom"))
install.packages(c("tidyverse", "forecast", "modelr", "pryr", "magrittr", "glmnet", "randomForest", "lintr", "xtable", "testthat"))
install.packages(c("lintr", "h2o", "sparklyr", "xgboost", "rstan", "rstanarm"))
#+END_SRC

Install the essentials of the tidyverse.

#+BEGIN_SRC R :session :eval maybe
#+END_SRC

This actually does most of the work.

#+BEGIN_SRC R :session :eval maybe
  install.packages("pryr")
#+END_SRC
Useful for inspecting R objects.


#+BEGIN_SRC R :session :eval no
  install.packages("forecast")
#+END_SRC

#+RESULTS:

Super useful for time series

 $A = \pi*r^{2}$

** Bashrc

#+BEGIN_SRC sh
export PATH=/home/richie/anaconda3/bin:$PATH:
alias tp="ping 8.8.8.8"
#+END_SRC

- need to figure out how to append to an existing file
- this is easy, it's just >> (double arrow)
